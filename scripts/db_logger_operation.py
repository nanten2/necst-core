#!usr/bin/env python3

name  = 'db_logger_operation'

import time
import threading
import necstdb

import rospy
import std_msgs.msg

class db_logger_operation(object):

    def __init__(self):
        self.data_list = []
        self.open_table_dict = {}
        self.db_path = ''
        self.commiting_db = ''

        self.sub_path = rospy.Subscriber(
            name = '/logger_path',
            data_class = std_msgs.msg.String,
            callback = self.callback_path,
            queue_size = 1,
        )
        
        self.th = threading.Thread(target= self.loop)

        self.th.start()
        pass
    
    def callback_path(self, req):
        self.db_path = req.data

    def regist(self, data):
        if self.db_path != '':
            self.data_list.append({'path': self.db_path,'data': data})
        else: pass
      
        return

    def loop(self):
       
        while True:    
            if len(self.data_list) == 0:
                if len(self.open_table_dict) != 0:
                    for open_table in self.open_table_dict.values():
                        open_table.close()
                    self.open_table_dict = {}
                        pass
                pass
                    
                if rospy.is_shutdown():
                    break
                time.sleep(0.01)
                continue

            d = self.data_list.pop(0)
            
            if d['path'] != self.commiting_db:
                
                if len(self.open_table_dict) != 0:
                    for open_table in self.open_table_dict.values():
                        open_table.close()
                    self.open_table_dict = {}
                        pass

                db = necstdb.opendb(d['path'])           
                self.commiting_db = d['path']
                pass
            
            
            table_name = d['data']['topic'].replace('/','-')
            
            if type(d['data']['msgs']['data']) is list:
                table_data = [d['data']['time'],*d['data']['msgs']['data']]

            elif type(d['data']['msgs']['data']) is tuple:
                table_data = [d['data']['time'],*d['data']['msgs']['data']]
            
            else: 
                table_data = [d['data']['time'],d['data']['msgs']['data']]
            
            db.create_table(table_name,
                            {'data':[
                                {
                                   ' key': 'timestamp',
                                   'format': 'd',
                                   'size': 8,
                                },
                                {
                                    'key': 'data',
                                    'format': '{}f'.format(len(table_data)-1),
                                    'size': 131072,
                                },],
                            'memo': 'generated by necstdb node',
                            'version': '0.2.0',})
            
            if table_name not in self.table_dict:
                self.open_table_dict[table_name] = db.open_table(table.name, mode = 'ab')
                pass
            
            self.open_table_dict[table_name].append(*table_data)
            
            continue 
        return            

        

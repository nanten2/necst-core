#!usr/bin/env python3

name  = 'db_logger_operation'

import time
import threading
import necstdb

import rospy
import std_msgs.msg

class db_logger_operation(object):

    def __init__(self):
        self.data_list = []
        self.open_table_dict = {}
        self.db_path = ''

        self.sub_path = rospy.Subscriber(
            name = '/logger_path',
            data_class = std_msgs.msg.String,
            callback = self.callback_path,
            queue_size = 1,
        )
        
        self.th = threading.Thread(target= self.loop)

        self.th.start()
        pass
    
    def callback_path(self, req):
        self.db_path = req.data
        if self.db_path != '':
            db = necstdb.opendb(self.db_path)
            self.
            self.open_table_dict = {}
            pass
        return 

    def regist(self, data):
        if self.db_path != '':
            self.data_list.append(data)
        else: pass
      
        return

    def loop(self):
       
        while True:    
            if len(self.data_list) == 0:
                pass
                    
                if rospy.is_shutdown():
                    break
                time.sleep(0.01)
                continue

            d = self.data_list.pop(0)
            
            table_name = d['topic'].replace('/','-')
            
            #if type(d['msgs']['data']) is std.msgs.msg.Float32MultiArray:
            #    table_data = [d['time'],*d['msgs']['data']]

            #else: 
            #   table_data = [d['time'],d['msgs']['data']]
            
            db.create_table(table_name,
                            {'data':[
                                {
                                   ' key': 'timestamp',
                                   'format': 'd',
                                   'size': 8,
                                },
                                {
                                    'key': d['data']['msgs'].keys(),
                                    'format': '{}f'.format(len(table_data)-1),
                                    'size': 131072,
                                },],
                            'memo': 'generated by necstdb node',
                            'version': '0.2.0',})
            
            if table_name not in self.open.table_dict:
                self.open_table_dict[table_name] = db.open_table(table.name, mode = 'ab')
                pass
            
            self.open_table_dict[table_name].append(*table_data)
            
            continue 
        return            

        
